
Toggles LED with push buttom atmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000779  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000692  00000000  00000000  00000951  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000288  00000000  00000000  00000fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  0000126c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d0  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  000016a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include "portsreadwrite.h"

int main(void)
{
    
  configure_ports();			//For input and output
  80:	0e 94 47 00 	call	0x8e	; 0x8e <configure_ports>
     
    while (1) 
    {
		
		
		(button_pressed());
  84:	0e 94 51 00 	call	0xa2	; 0xa2 <button_pressed>
		
		{		//button_pressed returns 1 when button is pressed 
			
			toggle_LED();	}
  88:	0e 94 54 00 	call	0xa8	; 0xa8 <toggle_LED>
  8c:	fb cf       	rjmp	.-10     	; 0x84 <main+0x4>

0000008e <configure_ports>:
#include <avr/io.h>  


void configure_ports(){
	
	DDRD&=~(1<<PD0);		//PORTD pin0 as input for push button;
  8e:	8a b1       	in	r24, 0x0a	; 10
  90:	8e 7f       	andi	r24, 0xFE	; 254
  92:	8a b9       	out	0x0a, r24	; 10
	PORTD|=(1<<PD0);		//Pullup the pin0 of portd
  94:	8b b1       	in	r24, 0x0b	; 11
  96:	81 60       	ori	r24, 0x01	; 1
  98:	8b b9       	out	0x0b, r24	; 11
	DDRB|=(1<<PB0);		    //PORTB pin0 as output for push button;
  9a:	84 b1       	in	r24, 0x04	; 4
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	84 b9       	out	0x04, r24	; 4
  a0:	08 95       	ret

000000a2 <button_pressed>:
	
}

char button_pressed()
{
			return((PIND&0x01)&0x01);		//Invert of current status because pin pulled
  a2:	89 b1       	in	r24, 0x09	; 9
									//Multiple masks because invert will set other bits 1	
}
  a4:	81 70       	andi	r24, 0x01	; 1
  a6:	08 95       	ret

000000a8 <toggle_LED>:
	               
	               /*XOR operation with 00000001. All other pins remain unchanged
	              but pin0 toggles*/
				   
				   //HERE WE WRITE THAT XOR CODE SEPARATELY AND PUT A IF AND ELSE CONDITION ON IT 
	if ( button_pressed())      //IF BOTTON IS PRESSED IS THEN STATMENT TRUE OTHERWISE WISE FALSE
  a8:	0e 94 51 00 	call	0xa2	; 0xa2 <button_pressed>
  ac:	88 23       	and	r24, r24
  ae:	21 f0       	breq	.+8      	; 0xb8 <toggle_LED+0x10>
	{   
		PORTB&=0b11111110;      //IF BUTTON IS PRESSED IT MEANS IT STATMENT TRUE SO THIS CODE WILL EXECUTE
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	8e 7f       	andi	r24, 0xFE	; 254
  b4:	85 b9       	out	0x05, r24	; 5
  b6:	08 95       	ret
	}
	else
	{
		PORTB|=0b00000001;      //IF BUTTON IS NOT PRESSED IT MEAN ITS STATMENT FALSE THEN THIS CODE WILL EXCUTE
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	85 b9       	out	0x05, r24	; 5
  be:	08 95       	ret

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
